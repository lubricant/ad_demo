

import numpy as np
import autodiff as ad

from autodiff.node import Node


class OutputLayer(object):

    def __init__(self, output_expr):
        assert isinstance(output_expr, Node)
        self.output = output_expr

    def __repr__(self):
        return str(self.output)

    def output(self):
        return self.output


class InputLayer(OutputLayer):

    def __init__(self, input_shape):
        self.input = ad.const(input_shape, '<input>')
        super().__init__(self.input)

    def input(self, value):
        self.input.value = value


class HiddenLayer(object):

    def __init__(self, name, shape):
        '''
        对权重进行正则化，保证每个神经元输出方差一致
        否则那些有着更多输入的神经元，输出有着更高的方差（过拟合）
        '''
        scale = np.sqrt(1./sum(shape))
        self.weight = ad.var(name, np.random.normal(0.0, scale, shape))

    def grad(self):
        return self.weight.gradient[0]

    def value(self):
        return self.weight.result

    def update(self, value):
        self.weight.value = value
